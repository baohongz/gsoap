library(gsoap)
?
gsoap
library(gsoap)
devtools::document()
library(gsoap)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(gsoap)
?create_gsoap_layout
library(gsoap)
?create_gsoap_layout
create_gsoap_layout = function(x,
genes,
pvalues,
splitter = ',',
distance.method = 'jaccard',
projection.method = 'iso',
scale.factor = 1.0,
weighted = TRUE,
do.packing = TRUE,
calc.centrality = TRUE,
do.clustering = TRUE,
isomap.k = 3,
tsne.perplexity = 30,
tsne.iterations = 1e+3,
cca.epochs = 10,
cca.alpha0 = 0.5,
no.clusters = NULL,
max.clusters = 8,
pam.boots = 100){ # add has genes
# -------------
# Check inputs
# -------------
if (missing(x)){
stop('Input is missing')
}
if (!is.data.frame(x)){
stop('Input is not data frame')
}
if (!is.character(rownames(x))){
stop('Input has missing or improper rownames')
}
if(!((genes %in% colnames(x))|(genes %in% 1:ncol(x)))){
stop('Wrong `genes` value')
}
if(!((pvalues %in% colnames(x))|(pvalues %in% 1:ncol(x)))){
stop('Wrong `pvalues` value')
}
if (!any(grepl(splitter, x[,genes]))){
warning('Either `genes`, or `splitter` seem to be not correct.')
}
# --------------
# Create layout
# --------------
# Extract query genes -- instances memberships
memberships.list = setNames(strsplit(x[,genes], splitter), rownames(x))
# Create association matrix
asc.mat = create_association_matrix(memberships.list)
# Get number of member genes
no.members = rowSums(asc.mat)
# Calculate distance matrix
dist.mat = calc_distance_matrix(asc.mat,
distance.method = distance.method)
# --------------------------
# Do projection to 2d space
# --------------------------
if (projection.method == 'iso'){
proj = suppressMessages(isomap_transformation(dist.mat,
isomap.k = isomap.k))
}
if (projection.method == 'mds'){
#res = mds_transformation(d)
proj = suppressMessages(sammons_tranformation(dist.mat))
}
if (projection.method == 'cca'){
proj = suppressMessages(cca_transformation(dist.mat,
cca.epochs,
cca.alpha0))
}
if (projection.method == 'tsne'){
proj = suppressMessages(tsne_transformation(dist.mat,
tsne.perplexity,
tsne.iterations))
}
# Do 2d projection
xy = proj$ProjectedPoints
# Calculate circle radius
layout = create_layout(xy, no.members, scale.factor = scale.factor)
# Circle packing
if (do.packing){
layout = setNames(packing_simple(layout), c('x', 'y', 'radius'))
}
# Set rownames
rownames(layout) = rownames(x)
# Calculate number of members
layout$size = no.members
# ---------------------
# Calculate distortion
# ---------------------
# Calculate euclidean distance between instances after projection
dx = as.matrix(suppressMessages(philentropy::distance(layout[,1:2], method = 'euclidean')))
# Calculate Kruskal stress after projection and packing
stress = ProjectionBasedClustering::KruskalStress(dist.mat, dx)
# Calculate spearman correlation
spcorr = cor(c(dist.mat), c(dx), method = 'spearman')
# -----------------------
# Extended functionality
# -----------------------
# Set weights
if (weighted){
layout$Weight = -log10(x[,pvalues])
} else {
layout$Weight = rep(1, nrow(layout))
}
# Calculate centrality and add to layout
if (calc.centrality){
layout$Centrality = apply(dist.mat, 1, weighted.mean, layout$Weight)
layout$Centrality = 1. - min_max_scale(layout$Centrality)
}
# Do clustering
if (do.clustering){
layout$Cluster = pamlustering(dist.mat,
layout$Weight,
no.clusters = no.clusters,
max.clusters = max.clusters,
boots = pam.boots)
}
# Wrap results together
res = list(layout,
distance.method,
projection.method,
scale.factor,
stress,
spcorr)
# Set names
names(res) = c('Layout',
'Distance method',
'Projection method',
'Scale factor',
'Stress',
'spcorr')
# Return
return(res)
}
?create_gsoap_layout
??create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
devtools::document()
devtools::document()
?create_gsoap_layout
library(gsoap)
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
?create_gsoap_layout
devtools::document()
devtools::document()
?create_gsoap_layout
devtools::document()
library(gsoap)
devtools::document()
?plot_gsoap
devtools::document()
?plot_gsoap
devtools::document()
?plot_gsoap
?ggplot
devtools::document()
?ggplot
?aes
?geom_text_label
?geom_text_repel
library(gsoap)
data("pxgenes")
pxgenes
setwd('~/workspace/Asmaa/')
# ---------------
# Load libraries
# ---------------
library(openxlsx)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(Hmisc)
# ---------------------------
# Load miRNA expression data
# ---------------------------
fname = './data/content/Asmaa_content_normalized_data.xlsx'
content.edata = read.xlsx(fname, sheet = 'normalized.data')
fname = './data/colon/Asmaa_normalized_data.xlsx'
tissues.edata = read.xlsx(fname, sheet = 'normalized.data')
# Keep only endogenous probes
content.edata = subset(content.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
tissues.edata = subset(tissues.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
# Set probe names as rownames
rownames(content.edata) = content.edata$Name
rownames(tissues.edata) = tissues.edata$Name
# Drop probe data
content.edata = content.edata[,-c(1:3)]
tissues.edata = tissues.edata[,-c(1:3)]
# Get rid miRs with zero stand. dev.
content.edata = content.edata[apply(content.edata, 1, sd) != 0,]
tissues.edata = tissues.edata[apply(tissues.edata, 1, sd) != 0,]
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
# ---------------
# Load taxa data
# ---------------
fname = './data/content/otu_table_final_normalized_rel_L6_males_reorganized.xlsx'
taxa.data = read.xlsx(fname, startRow = 4, rowNames = T)
colnames(taxa.data) = rownames(mdata)
# Plot heatmap of all taxa
pheatmap(t(taxa.data),
filename = './results/content_all_taxa.pdf',
width = 12.,
height = 12.5)
# -------------------------------------------------
# Calculate correlations between miRNA expression
# and taxa abundance (pearson and spearman)
# ------------------------------------------------
pears.content = rcorr(t(taxa.data),t(content.edata), type = 'pearson')
pears.tissues = rcorr(t(taxa.data),t(tissues.edata), type = 'pearson')
pears.content$r = pears.content$r[rownames(taxa.data),rownames(content.edata)]
pears.content$P = pears.content$P[rownames(taxa.data),rownames(content.edata)]
pears.tissues$r = pears.tissues$r[rownames(taxa.data),rownames(tissues.edata)]
pears.tissues$P = pears.tissues$P[rownames(taxa.data),rownames(tissues.edata)]
pheatmap(t(pears.content$r),
filename = './results/Pearson_content_all.pdf',
cellwidth = 7,
cellheight = 7)
pheatmap(t(pears.tissues$r),
filename = './results/Pearson_tissues_all.pdf',
cellwidth = 7,
cellheight = 7)
pears.content$r_melt = melt(pears.content$r, value.name = 'corr')
pears.content$P_melt = melt(pears.content$P, value.name = 'pval')
pears.tissues$r_melt = melt(pears.tissues$r, value.name = 'corr')
pears.tissues$P_melt = melt(pears.tissues$P, value.name = 'pval')
pears.content$res = cbind(pears.content$r_melt, pears.content$P_melt['pval'])
pears.tissues$res = cbind(pears.tissues$r_melt, pears.tissues$P_melt['pval'])
pears.content$res$fdr = p.adjust(pears.content$res$pval, 'fdr')
pears.tissues$res$fdr = p.adjust(pears.tissues$res$pval, 'fdr')
pears.content$sig.res = subset(pears.content$res, fdr < 0.01)
pears.tissues$sig.res = subset(pears.tissues$res, fdr < 0.01)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
write.xlsx(pears.content[c('res', 'sig.res')], fname)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
write.xlsx(pears.tissues[c('res', 'sig.res')], fname)
pdf('./results/miRNAs_content_taxa_dependencies.pdf')
for (i in 1:nrow(pears.content$sig.res)){
taxon = as.character(pears.content$sig.res$Var1[i])
mirna = as.character(pears.content$sig.res$Var2[i])
fdr = pears.content$sig.res$fdr[i]
r = pears.content$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(content.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
pdf('./results/miRNAs_tissue_taxa_dependencies.pdf')
for (i in 1:nrow(pears.tissues$sig.res)){
taxon = as.character(pears.tissues$sig.res$Var1[i])
mirna = as.character(pears.tissues$sig.res$Var2[i])
fdr = pears.tissues$sig.res$fdr[i]
r = pears.tissues$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(tissues.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
# -----------------------------
# Reduce to top 5 taxa by mean
# (effectiely > 5% of abindance)
# -----------------------------
taxa.data = t(taxa.data[rowMeans(taxa.data)>0.05,])
# Plot heatmap of selected taxa
pheatmap(taxa.data,
filename = './results/content_selected_taxa.pdf',
annotation_row = mdata,
width = 4.5,
height = 12)
# ------------------------------------
# Assess colinearity of the taxa data
# ------------------------------------
cor.m = print(cor(taxa.data))
print(abs(cor.m[lower.tri(cor.m)]))
# --------------------------------
# Plot samples taxa cor histogram
# --------------------------------
cmat = cor(t(taxa.data))
pheatmap(cmat,
annotation_col = mdata,
filename = './results/content_samples_correlations_by_taxa.pdf')
cmat{1:3, 1:3}
cmat[1:3,1:3]
head(taxa.data)
cmat[1:4, 1:4]
write.table(cmat,
fname = './results/content_samples_correlations_by_taxa.csv',
sep = ',',
row.names = TRUE,
col.names = NA,
quote = F)
write.table(cmat,
'./results/content_samples_correlations_by_taxa.csv',
sep = ',',
row.names = TRUE,
col.names = NA,
quote = F)
library(devtools)
library(roxygen2)
data(pxgenes)
dim(pxgenes)
head(pxgenes)
dim(pxgenes)
colnames(pxgene)
colnames(pxgenes)
devtools::document()
summary(pxgenes)
devtools::document()
?pxgenes
?data(pxgenes)
?pxgenes
library(gsoap)
?pxgenes
pxgenes
data(pxgenes)
?pxgenes
help(pxgenes)
devtools::document()
library(gsoap)
help(pxgenes)
devtools::document()
library(gsoap)
?pxgenes
devtools::document()
library(gsoap)
?pxgenes
devtools::document()
?pxgenes
library(gsoap)
?pxgenes
devtools::document()
library(gsoap)
tail(pxgenes)
devtools::document()
library(gsoap)
devtools::document()
library(gsoap)
?create_gsoap_layout
devtools::document()
library(gsoap)
devtools::document()
library(gsoap)
devtools::load_all()
?create_gsoap_layout
library(gsoap)
?create_gsoap_layout
library(gsoap)
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
?data
library(pheatmap)
?pheatmap
?create_gsoap_layout
library(gsoap)
create_gsoap_layout()
?create_gsoap_layout()
devtools::document()
devtools::document()
library(gsoap)
data(pxgenes)
l = create_gsoap_layout(pxgenes, 'Members', 'p.value')
l$layout
devtools::document()
devtools::document()
library(gsoap)
data(pxgenes)
l = create_gsoap_layout(pxgenes, 'Members', 'p.values')
l = create_gsoap_layout(pxgenes, 'Members', 'p.value')
plot_gsoap(l$layout)
?update_geom_defaults
devtools::document()
library(gsoap)
data("pxgenes")
l = create_gsoap_layout(pxgenes, 'Members', 'p.value')
plot_gsoap(l$layout)
library(gsoap)
data("pxgenes")
l = create_gsoap_layout(pxgenes, 'Members', 'p.value')
plot_gsoap(l$layout)
devtools::document()
devtools::document()
devtools::document()
library(gsoap)
plot_gsoap(l$layout)
plot_gsoap(l$layout, as.color = 'cluster')
plot_gsoap(l$layout, as.color = 'Cluster')
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'Centrality')
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'weight')
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'Weight')
head(l$layout)
l$layout = cbind(l$layout, pxgenes$p.value)
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value')
tail(l$layout)
colnames(l$layout)[ncol(l$layout)] = 'p.value'
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value')
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value', which.labels = sample(nrow(l$layout), 10))
library(gsoap)
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value', which.labels = sample(nrow(l$layout), 10))
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value')
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value', which.labels = 1:3)
plot_gsoap(l$layout, as.color = 'Cluster', as.alpha = 'p.value', which.labels = 1:3)
