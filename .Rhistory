fname = './data/content/otu_table_final_normalized_rel_L6_males_reorganized.xlsx'
taxa.data = read.xlsx(fname, startRow = 4, rowNames = T)
colnames(taxa.data) = rownames(mdata)
rownames(taxa.data) = paste0('C', 1:nrow(taxa.data))
# Plot heatmap of all taxa
pheatmap(t(taxa.data),
filename = './results/content_all_taxa.pdf',
width = 12.,
height = 12.5)
# -------------------------------------------------
# Calculate correlations between miRNA expression
# and taxa abundance (pearson and spearman)
# ------------------------------------------------
pears.content = rcorr(t(taxa.data),t(content.edata), type = 'pearson')
pears.tissues = rcorr(t(taxa.data),t(tissues.edata), type = 'pearson')
pears.content$r = pears.content$r[rownames(taxa.data),rownames(content.edata)]
pears.content$P = pears.content$P[rownames(taxa.data),rownames(content.edata)]
pears.tissues$r = pears.tissues$r[rownames(taxa.data),rownames(tissues.edata)]
pears.tissues$P = pears.tissues$P[rownames(taxa.data),rownames(tissues.edata)]
pheatmap(t(pears.content$r),
filename = './results/Pearson_content_all.pdf',
cellwidth = 7,
cellheight = 7)
pheatmap(t(pears.tissues$r),
filename = './results/Pearson_tissues_all.pdf',
cellwidth = 7,
cellheight = 7)
pears.content$r_melt = melt(pears.content$r, value.name = 'corr')
pears.content$P_melt = melt(pears.content$P, value.name = 'pval')
pears.tissues$r_melt = melt(pears.tissues$r, value.name = 'corr')
pears.tissues$P_melt = melt(pears.tissues$P, value.name = 'pval')
pears.content$res = cbind(pears.content$r_melt, pears.content$P_melt['pval'])
pears.tissues$res = cbind(pears.tissues$r_melt, pears.tissues$P_melt['pval'])
pears.content$res$fdr = p.adjust(pears.content$res$pval, 'fdr')
pears.tissues$res$fdr = p.adjust(pears.tissues$res$pval, 'fdr')
pears.content$sig.res = subset(pears.content$res, fdr < 0.01)
pears.tissues$sig.res = subset(pears.tissues$res, fdr < 0.01)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
write.xlsx(pears.content[c('res', 'sig.res')], fname)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
write.xlsx(pears.tissues[c('res', 'sig.res')], fname)
pdf('./results/miRNAs_content_taxa_dependencies.pdf')
for (i in 1:nrow(pears.content$sig.res)){
taxon = as.character(pears.content$sig.res$Var1[i])
mirna = as.character(pears.content$sig.res$Var2[i])
fdr = pears.content$sig.res$fdr[i]
r = pears.content$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(content.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
pdf('./results/miRNAs_tissue_taxa_dependencies.pdf')
for (i in 1:nrow(pears.tissues$sig.res)){
taxon = as.character(pears.tissues$sig.res$Var1[i])
mirna = as.character(pears.tissues$sig.res$Var2[i])
fdr = pears.tissues$sig.res$fdr[i]
r = pears.tissues$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(tissues.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
dim(pears.content$r)
pears.content$r[unique(pears.content$sig.res$Var1), unique(pears.content$sig.res$Var2)]
setwd('~/workspace/Asmaa/')
library(microbiomeSeq)
library(openxlsx)
library(phyloseq)
library(edgeR)
library(DESeq2)
library(ggplot2)
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
taxa.data
library(gsoap)
devtools::document()
devtools::test()
library(gsoap)
library(ggpubr)
# # Load example data
# data("pxgenes")
#
# # Subset the example data
# N = 100
# pxgenes = head(pxgenes[order(pxgenes$FDR),], N)
#
# # -----------------
# # Generate layouts
# # -----------------
# projections = c('iso', 'mds', 'cca', 'tsne')
# layouts = list()
# for (projection in projections){
#   layouts[[projection]] = gsoap_layout(pxgenes,
#                                        'Members',
#                                        'p.value',
#                                        scale.factor = 0.9,
#                                        projection = projection,
#                                        packing = T,
#                                        no.clusters = 4)
# }
#
# # Add ANGPT1 logical index to layout
# # and order by sigificance
# for (projection in projections){
#   layouts[[projection]]$ANGPT1 = factor(grepl('ANGPT1', pxgenes$Members))
#   layouts[[projection]] = layouts[[projection]][order(layouts[[projection]]$significance, decreasing = F),]
# }
#
# save(layouts, file = './img/paper_layout.RData')
# -------------
# Create plots
# -------------
load('./img/paper_layout.RData')
f = function(p, a, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
g = function(p, a1, a2, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a1,
as.alpha = a2,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
aesthetics = c('significance', 'closeness', 'cluster', 'ANGPT1')
plots = list()
for (aesthetic in aesthetics){
if (aesthetic %in% c('cluster', 'ANGPT1')){
l = setNames(lapply(projections, g, aesthetic, 'significance'), projections)
} else {
l = setNames(lapply(projections, f, aesthetic), projections)
}
plots[[aesthetic]] = l
}
library(gsoap)
library(ggpubr)
projections = c('iso', 'mds', 'cca', 'tsne')
aesthetics = c('significance', 'closeness', 'cluster', 'ANGPT1')
# # Load example data
# data("pxgenes")
#
# # Subset the example data
# N = 100
# pxgenes = head(pxgenes[order(pxgenes$FDR),], N)
#
# # -----------------
# # Generate layouts
# # -----------------
# layouts = list()
# for (projection in projections){
#   layouts[[projection]] = gsoap_layout(pxgenes,
#                                        'Members',
#                                        'p.value',
#                                        scale.factor = 0.9,
#                                        projection = projection,
#                                        packing = T,
#                                        no.clusters = 4)
# }
#
# # Add ANGPT1 logical index to layout
# # and order by sigificance
# for (projection in projections){
#   layouts[[projection]]$ANGPT1 = factor(grepl('ANGPT1', pxgenes$Members))
#   layouts[[projection]] = layouts[[projection]][order(layouts[[projection]]$significance, decreasing = F),]
# }
#
# save(layouts, file = './img/paper_layout.RData')
# -------------
# Create plots
# -------------
load('./img/paper_layout.RData')
f = function(p, a, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
g = function(p, a1, a2, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a1,
as.alpha = a2,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
plots = list()
for (aesthetic in aesthetics){
if (aesthetic %in% c('cluster', 'ANGPT1')){
l = setNames(lapply(projections, g, aesthetic, 'significance'), projections)
} else {
l = setNames(lapply(projections, f, aesthetic), projections)
}
plots[[aesthetic]] = l
}
leters
letters
i = 1
(i - 1) * 4
(i - 1) * 4 + 1
i = 2
(i - 1) * 4 + 1
idx = (i - 1) * 4 + 1
idx:idx+4
c(idx:idx+4)
c(idx:(idx+4))
leters[c(idx:(idx+4))]
letters[c(idx:(idx+4))]
toupper(letters[c(idx:(idx+4))])
4 * i -3
i = 1
4 * i -3
i - 2
i = 2
4 * i -3
4 * 3 -3
4 * 4 -3
# --------------
# Arrange plots
# --------------
n = length(projections)
m = length(aesthetics)
arranged = list()
labels = list(c(c('A', 'B')))
for (i in 1:m){
idx = (i - 1) * 4 + 1
labels = toupper(letters[c(idx:(idx+4))])
aesthetic = aesthetics[i]
arranged[[aesthetic]] = ggarrange(plotlist = plots[[aesthetic]],
ncol = n,
nrow = 1,
common.legend = TRUE,
legend = 'top',
labels = labels)
}
final_plot = ggarrange(plotlist = arranged,
nrow = length(aesthetics),
ncol = 1,
align = 'hv')
pdf('./img/paper_plot_w_labels.pdf', width = 15, height = 16)
plot(final_plot)
dev.off()
library(gsoap)
devtools::document()
path = read_excel("~/Downloads/pathway_enrichment_results.xlsx")
library(readxl)
path = read_excel("~/Downloads/pathway_enrichment_results.xlsx")
class(path)
path
?read_excel
is.data.frame(path)
class(path)
path[['tbl']]
pxgenes
class(pxgenes)
class(pxgenes) == 'data.frame'
as.data.frame(path)
path = as.data.frame(path)
rownames(path)
rownames(path) = path$..1
gsoap_layout(path, "size of overlap with pathways", "P-value", splitter = ",")
colnames(path)
head(path)
head(path, 1)
head(path, 2)
path$`selected proteins in pathway`
path$`selected proteins in pathway[1:2]
'
``
`
path$`selected proteins in pathway`[1:2]
gsoap_layout(path, "selected proteins in pathway`", "P-value", splitter = ",")
gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
genes = "selected proteins in pathway"; pvalues =  "P-value"
x = path
complete.cases(x[c(genes, pvalues)])
all(complete.cases(x[c(genes, pvalues)]))
any(!complete.cases(x[c(genes, pvalues)]))
is.na(x[c(genes, pvalues)]))
is.na(x[c(genes, pvalues)])
any(is.na(x[c(genes, pvalues)]))
gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
library(gsoap)
devtools::test()
path[complete.cases(path)]
path[complete.cases(path),]
dim(path[complete.cases(path),])
dim(path)
dim(path[complete.cases(path),])
path = read_excel("~/Downloads/pathway_enrichment_results.xlsx")
path = as.data.frame(path)
path = path[complete.cases(path),]
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
path
path$`P-value`
path[,c(genes, pvalues)]
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
x = path
if (missing(x)){
stop('Input is missing')
}
if (!is.data.frame(x)){
stop('Input is not data frame')
}
if (!is.character(rownames(x))){
stop('Input has missing or improper rownames')
}
if(!((genes %in% colnames(x))|(genes %in% 1:ncol(x)))){
stop('Wrong `genes` value')
}
if(!((pvalues %in% colnames(x))|(pvalues %in% 1:ncol(x)))){
stop('Wrong `pvalues` value')
}
if (!any(grepl(splitter, x[,genes]))){
warning('Either `genes`, or `splitter` seem to be not correct.')
}
if (any(is.na(x[c(genes, pvalues)]))){
stop('Input contains NA values.')
}
# --------------
# Create layout
# --------------
# Extract query genes -- instances memberships
memberships.list = setNames(strsplit(x[,genes], splitter), rownames(x))
# Create association matrix
asc.mat = create_association_matrix(memberships.list)
# Get number of member genes
no.members = rowSums(asc.mat)
# Calculate distance matrix
dist.mat = calc_distance_matrix(asc.mat, distance.method = distance)
splitter = ','
# Extract query genes -- instances memberships
memberships.list = setNames(strsplit(x[,genes], splitter), rownames(x))
# Create association matrix
asc.mat = create_association_matrix(memberships.list)
# Get number of member genes
no.members = rowSums(asc.mat)
# Calculate distance matrix
dist.mat = calc_distance_matrix(asc.mat, distance.method = distance)
# --------------
# Create layout
# --------------
# Extract query genes -- instances memberships
memberships.list = setNames(strsplit(x[,genes], splitter), rownames(x))
# Create association matrix
asc.mat = create_association_matrix(memberships.list)
# Get number of member genes
no.members = rowSums(asc.mat)
no.members
distance = 'jaccard'
# Calculate distance matrix
dist.mat = calc_distance_matrix(asc.mat, distance.method = distance)
pheatmap::pheatmap(dist.mat)
pheatmap::pheatmap(asc.mat)
any(rowSums(dist.mat == 0.) > 1)
warning("Zero dissimilarity between non-identical entries.")
k = ncol(asc.mat)
dist.mat = resolve.nondiag.zeros(dist.mat, k)
pheatmap::pheatmap(dist.mat)
projection == 'iso'
projection == 'mds'
projection = 'mds'
proj = suppressMessages(sammons_tranformation(dist.mat))
# Do 2d projection
xy = proj$ProjectedPoints
# Calculate circle radius
layout = create_layout(xy, no.members, scale.factor = scale.factor)
scale.factor = 0.5
# Calculate circle radius
layout = create_layout(xy, no.members, scale.factor = scale.factor)
layout = packing_simple(layout)
# Set  colnames
layout = setNames(layout, c('x', 'y', 'radius'))
# Set rownames
rownames(layout) = rownames(x)
# Calculate number of members
layout$size = no.members
# Calculate significance
layout$significance = -log10(x[,pvalues])
# Set weights
weights = rep(1, nrow(layout))
weights = layout$significance
# Calculate closeness and add to layout
layout$closeness = calc_closeness(dist.mat, weights)
layout$closeness
hist(layout$closeness)
hist(layout$closeness)
hist(layout$closeness, 100)
# Calculate euclidean distance between instances after projection
dx = as.matrix(suppressMessages(philentropy::distance(layout[,1:2], method = 'euclidean')))
# Calculate Kruskal stress after projection and packing
stress = ProjectionBasedClustering::KruskalStress(dist.mat, dx)
message(paste('Kruskall stress :', sprintf('%1.3f', stress)))
# Calculate spearman correlation
spcorr = cor(c(dist.mat), c(dx), method = 'spearman')
message(paste('Rank correlation :', sprintf('%1.3f', spcorr)))
plot(c(dist.mat), c(dx), method = 'spearman')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",")
warnings()
head(l)
gsoap_plot(l, as.color = 'significance')
gsoap_plot(l, as.color = 'cluster')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
gsoap_plot(l, as.color = 'cluster')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne', scale.factor = 1.)
gsoap_plot(l, as.color = 'cluster')
library(gsoap)
gsoap_plot(l, as.color = 'cluster', as.alpha = 'significance')
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
library(gsoap)
l = gsoap_layout(path, "selected proteins in pathway", "P-value", splitter = ",", projection = 'tsne')
path = read_excel("~/Downloads/pathway_enrichment_results.xlsx")
path = as.data.frame(path)
path = path[complete.cases(path),]
l = gsoap_layout(path, "selected proteins in pathway", "P-value",
splitter = ",", projection = 'tsne')
gsoap_plot(l, as.color = 'cluster', as.alpha = 'significance')
library(gsoap)
devtools::document()
devtools::tools()
devtools::test()
library(gsoap)
data("pxgenes")
?pxgenes
devtools::document()
?pxgenes
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# Load example dataset
data(pxgenes)
# Take top 100 instances
pxgenes = head(pxgenes[order(pxgenes$FDR),], 100)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
plot(p)
# Load example dataset
data(pxgenes)
# Take top 100 instances
pxgenes = head(pxgenes[order(pxgenes$FDR),], 100)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5, label.alpha = 1.0)
plot(p)
library(gsoap)
devtools::document()
devtools::test()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
