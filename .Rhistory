, res = 500
png(filename = './img/example_fig.png', width = 5, height = 3, res = 500)
plot(p)
dev.off()
dev.off()
png(filename = './img/example_fig.png', width = 5, height = 3, res = 500)
#pdf()
plot(p)
dev.off()
pdf(filename = './img/example_fig.png', width = 5, height = 3)
plot(p)
dev.off()
pdf(filename = './img/example_fig.pdf', width = 5, height = 3)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 5, height = 3)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 10, height = 8)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 7, height = 5)
plot(p)
dev.off()
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.pdf', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
library(gsoap)
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
plot(p)
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
setwd('~/workspace/Asmaa/')
# ---------------
# Load libraries
# ---------------
library(openxlsx)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(Hmisc)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig
pears.content.sig
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
colnames(pears.content.sig)
reshape(pears.tissues.sig[,c('Var1', 'Var2', 'corr')], idvar = 'Var1', timevar = 'Var2')
reshape(pears.tissues.sig[,c('Var1', 'Var2', 'corr')], idvar = 'Var1', timevar = 'Var2', direction = 'wide')
reshape(pears.tissues.sig, idvar = 'Var1', timevar = 'Var2', direction = 'wide', drop = c('pval', 'fdr'))
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.contnet.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.contnet.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pheatmap(pears.content.sig)
pheatmap(sign(pears.content.sig))
dim(pears.content.sig)
dim(pears.tissue.sig)
dim(pears.tissues.sig)
pears.tissues.sig
sign(pears.tissues.sig)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'),
new.row.names = pears.tissues.sig$Var1)
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'),
new.row.names = pears.content.sig$Var1)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
rownames(pears.tissues.sig) = pears.tissues.sig$Var1
rownames(pears.content.sig) = pears.content.sig$Var1
pears.tissues.sig = pears.tissues.sig[,-1]
pears.content.sig = pears.content.sig[,-1]
pheatmap(sign(pears.content.sig))
pears.content.sig[1:4, 1:4]
colnames(pears.content.sig)
setwd('~/workspace/Asmaa/')
# ---------------
# Load libraries
# ---------------
library(openxlsx)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(Hmisc)
# ---------------------------
# Load miRNA expression data
# ---------------------------
fname = './data/content/Asmaa_content_normalized_data.xlsx'
content.edata = read.xlsx(fname, sheet = 'normalized.data')
fname = './data/colon/Asmaa_normalized_data.xlsx'
tissues.edata = read.xlsx(fname, sheet = 'normalized.data')
# Keep only endogenous probes
content.edata = subset(content.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
tissues.edata = subset(tissues.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
# Set probe names as rownames
rownames(content.edata) = content.edata$Name
rownames(tissues.edata) = tissues.edata$Name
# Drop probe data
content.edata = content.edata[,-c(1:3)]
tissues.edata = tissues.edata[,-c(1:3)]
# Get rid miRs with zero stand. dev.
content.edata = content.edata[apply(content.edata, 1, sd) != 0,]
tissues.edata = tissues.edata[apply(tissues.edata, 1, sd) != 0,]
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
# ---------------
# Load taxa data
# ---------------
fname = './data/content/otu_table_final_normalized_rel_L6_males_reorganized.xlsx'
taxa.data = read.xlsx(fname, startRow = 4, rowNames = T)
colnames(taxa.data) = rownames(mdata)
rownames(taxa.data) = paste0('C', 1:nrow(taxa.data))
# Plot heatmap of all taxa
pheatmap(t(taxa.data),
filename = './results/content_all_taxa.pdf',
width = 12.,
height = 12.5)
# -------------------------------------------------
# Calculate correlations between miRNA expression
# and taxa abundance (pearson and spearman)
# ------------------------------------------------
pears.content = rcorr(t(taxa.data),t(content.edata), type = 'pearson')
pears.tissues = rcorr(t(taxa.data),t(tissues.edata), type = 'pearson')
pears.content$r = pears.content$r[rownames(taxa.data),rownames(content.edata)]
pears.content$P = pears.content$P[rownames(taxa.data),rownames(content.edata)]
pears.tissues$r = pears.tissues$r[rownames(taxa.data),rownames(tissues.edata)]
pears.tissues$P = pears.tissues$P[rownames(taxa.data),rownames(tissues.edata)]
pheatmap(t(pears.content$r),
filename = './results/Pearson_content_all.pdf',
cellwidth = 7,
cellheight = 7)
pheatmap(t(pears.tissues$r),
filename = './results/Pearson_tissues_all.pdf',
cellwidth = 7,
cellheight = 7)
pears.content$r_melt = melt(pears.content$r, value.name = 'corr')
pears.content$P_melt = melt(pears.content$P, value.name = 'pval')
pears.tissues$r_melt = melt(pears.tissues$r, value.name = 'corr')
pears.tissues$P_melt = melt(pears.tissues$P, value.name = 'pval')
pears.content$res = cbind(pears.content$r_melt, pears.content$P_melt['pval'])
pears.tissues$res = cbind(pears.tissues$r_melt, pears.tissues$P_melt['pval'])
pears.content$res$fdr = p.adjust(pears.content$res$pval, 'fdr')
pears.tissues$res$fdr = p.adjust(pears.tissues$res$pval, 'fdr')
pears.content$sig.res = subset(pears.content$res, fdr < 0.01)
pears.tissues$sig.res = subset(pears.tissues$res, fdr < 0.01)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
write.xlsx(pears.content[c('res', 'sig.res')], fname)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
write.xlsx(pears.tissues[c('res', 'sig.res')], fname)
pdf('./results/miRNAs_content_taxa_dependencies.pdf')
for (i in 1:nrow(pears.content$sig.res)){
taxon = as.character(pears.content$sig.res$Var1[i])
mirna = as.character(pears.content$sig.res$Var2[i])
fdr = pears.content$sig.res$fdr[i]
r = pears.content$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(content.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
pdf('./results/miRNAs_tissue_taxa_dependencies.pdf')
for (i in 1:nrow(pears.tissues$sig.res)){
taxon = as.character(pears.tissues$sig.res$Var1[i])
mirna = as.character(pears.tissues$sig.res$Var2[i])
fdr = pears.tissues$sig.res$fdr[i]
r = pears.tissues$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(tissues.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
dim(pears.content$r)
pears.content$r[unique(pears.content$sig.res$Var1), unique(pears.content$sig.res$Var2)]
setwd('~/workspace/Asmaa/')
library(microbiomeSeq)
library(openxlsx)
library(phyloseq)
library(edgeR)
library(DESeq2)
library(ggplot2)
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
taxa.data
library(gsoap)
devtools::document()
devtools::test()
library(gsoap)
library(ggpubr)
# # Load example data
# data("pxgenes")
#
# # Subset the example data
# N = 100
# pxgenes = head(pxgenes[order(pxgenes$FDR),], N)
#
# # -----------------
# # Generate layouts
# # -----------------
# projections = c('iso', 'mds', 'cca', 'tsne')
# layouts = list()
# for (projection in projections){
#   layouts[[projection]] = gsoap_layout(pxgenes,
#                                        'Members',
#                                        'p.value',
#                                        scale.factor = 0.9,
#                                        projection = projection,
#                                        packing = T,
#                                        no.clusters = 4)
# }
#
# # Add ANGPT1 logical index to layout
# # and order by sigificance
# for (projection in projections){
#   layouts[[projection]]$ANGPT1 = factor(grepl('ANGPT1', pxgenes$Members))
#   layouts[[projection]] = layouts[[projection]][order(layouts[[projection]]$significance, decreasing = F),]
# }
#
# save(layouts, file = './img/paper_layout.RData')
# -------------
# Create plots
# -------------
load('./img/paper_layout.RData')
f = function(p, a, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
g = function(p, a1, a2, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a1,
as.alpha = a2,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
aesthetics = c('significance', 'closeness', 'cluster', 'ANGPT1')
plots = list()
for (aesthetic in aesthetics){
if (aesthetic %in% c('cluster', 'ANGPT1')){
l = setNames(lapply(projections, g, aesthetic, 'significance'), projections)
} else {
l = setNames(lapply(projections, f, aesthetic), projections)
}
plots[[aesthetic]] = l
}
library(gsoap)
library(ggpubr)
projections = c('iso', 'mds', 'cca', 'tsne')
aesthetics = c('significance', 'closeness', 'cluster', 'ANGPT1')
# # Load example data
# data("pxgenes")
#
# # Subset the example data
# N = 100
# pxgenes = head(pxgenes[order(pxgenes$FDR),], N)
#
# # -----------------
# # Generate layouts
# # -----------------
# layouts = list()
# for (projection in projections){
#   layouts[[projection]] = gsoap_layout(pxgenes,
#                                        'Members',
#                                        'p.value',
#                                        scale.factor = 0.9,
#                                        projection = projection,
#                                        packing = T,
#                                        no.clusters = 4)
# }
#
# # Add ANGPT1 logical index to layout
# # and order by sigificance
# for (projection in projections){
#   layouts[[projection]]$ANGPT1 = factor(grepl('ANGPT1', pxgenes$Members))
#   layouts[[projection]] = layouts[[projection]][order(layouts[[projection]]$significance, decreasing = F),]
# }
#
# save(layouts, file = './img/paper_layout.RData')
# -------------
# Create plots
# -------------
load('./img/paper_layout.RData')
f = function(p, a, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
g = function(p, a1, a2, L = 3){
x = layouts[[p]]
x = x[order(x['significance'], decreasing = T),]
gsoap_plot(x,
as.color = a1,
as.alpha = a2,
xlabel = paste(p, '1'),
ylabel = paste(p, '2'),
size.guide.loc = c(0., 1.),
base.fontsize = 14,
size.guide.fontsize = 9,
size.guide.no = 3,
viridis.direction = -1,
which.labels = 1:L,
label.fontsize = 12,
label.alpha = 1.)
}
plots = list()
for (aesthetic in aesthetics){
if (aesthetic %in% c('cluster', 'ANGPT1')){
l = setNames(lapply(projections, g, aesthetic, 'significance'), projections)
} else {
l = setNames(lapply(projections, f, aesthetic), projections)
}
plots[[aesthetic]] = l
}
leters
letters
i = 1
(i - 1) * 4
(i - 1) * 4 + 1
i = 2
(i - 1) * 4 + 1
idx = (i - 1) * 4 + 1
idx:idx+4
c(idx:idx+4)
c(idx:(idx+4))
leters[c(idx:(idx+4))]
letters[c(idx:(idx+4))]
toupper(letters[c(idx:(idx+4))])
4 * i -3
i = 1
4 * i -3
i - 2
i = 2
4 * i -3
4 * 3 -3
4 * 4 -3
# --------------
# Arrange plots
# --------------
n = length(projections)
m = length(aesthetics)
arranged = list()
labels = list(c(c('A', 'B')))
for (i in 1:m){
idx = (i - 1) * 4 + 1
labels = toupper(letters[c(idx:(idx+4))])
aesthetic = aesthetics[i]
arranged[[aesthetic]] = ggarrange(plotlist = plots[[aesthetic]],
ncol = n,
nrow = 1,
common.legend = TRUE,
legend = 'top',
labels = labels)
}
final_plot = ggarrange(plotlist = arranged,
nrow = length(aesthetics),
ncol = 1,
align = 'hv')
pdf('./img/paper_plot_w_labels.pdf', width = 15, height = 16)
plot(final_plot)
dev.off()
