N = 100
all_args = list()
for (i in 1:N){
args = list('distance' = sample(DISTANCE_METHODs, 1),
'projection' = sample(PROJECTION_METHODs, 1),
'weighted' = sample_bool(),
'packing' = sample_bool(),
'clustering' = sample_bool(),
'hc.method' = sample(HC_METHODS, 1),
'cluster.stat' = sample(CLUSTER_STATS_OPTIONs, 1, prob = c(10, rep(1, 9))))
color = ifelse(args[['clustering']],
'cluster',
ifelse(args[['closeness']],
'closeness',
'importance'))
alpha = ifelse(args[['clustering']],
'intracluster_closeness',
'importance')
viridis = sample(c('viridis', 'magma', 'plasma', 'inferno', 'cividis'), 1)
args[['color']] = color
args[['alpha']] = alpha
args[['viridis']] = viridis
args[['which.labels']] = sample(nrow(pxgenes), 5)
all_args[[i]] = args
}
pdf('./img/exhtest.pdf')
for (i in 1:N){
args = all_args[[i]]
print(i)
print(args)
l = gsoap_layout(pxgenes,
'Members',
'p.value',
distance = args$distance,
projection = args$projection,
weighted = args$weighted,
packing = args$packing,
clustering = args$clustering,
hc.method = args$hc.method,
cluster.stat = args$cluster.stat)
l$p.value = -log10(pxgenes$p.value)
print(head(l))
p = gsoap_plot(l,
as.color = args$color,
as.alpha = args$alpha,
show.size.guide = sample_bool(),
show.color.guide = sample_bool(),
show.alpha.guide = sample_bool(),
viridis.option = args$viridis,
which.labels = args$which.labels)
plot(p)
}
dev.off()
library(gsoap)
data(pxgenes)
DISTANCE_METHODs = c('jaccard',
'manhattan',
'dice',
'pearson')
PROJECTION_METHODs = c('iso',
'mds',
'cca',
'tsne')
HC_METHODS = c('ward.D',
'ward.D2',
'single',
'average',
'median',
'centroid')
PACKING_OPTIONs = c(TRUE, FALSE)
CLOSENESS_OPTIONs = c(TRUE, FALSE)
CLUSTERING_OPTIONs = c(TRUE, FALSE)
CLUSTER_STATS_OPTIONs = c('meta',
'PBC',
'HGSD',
'ASW',
'ASWw',
'CH',
'R2',
'CHsq',
'R2sq',
'HC')
sample_bool = function(){
sample(c(TRUE, FALSE), 1)
}
N = 100
all_args = list()
for (i in 1:N){
args = list('distance' = sample(DISTANCE_METHODs, 1),
'projection' = sample(PROJECTION_METHODs, 1),
'weighted' = sample_bool(),
'packing' = sample_bool(),
'clustering' = sample_bool(),
'hc.method' = sample(HC_METHODS, 1),
'cluster.stat' = sample(CLUSTER_STATS_OPTIONs, 1, prob = c(10, rep(1, 9))))
color = ifelse(args[['clustering']],
'cluster',
sample(c('closeness', 'importance'), 1))
alpha = ifelse(args[['clustering']],
'intracluster_closeness',
'importance')
viridis = sample(c('viridis', 'magma', 'plasma', 'inferno', 'cividis'), 1)
args[['color']] = color
args[['alpha']] = alpha
args[['viridis']] = viridis
args[['which.labels']] = sample(nrow(pxgenes), 5)
all_args[[i]] = args
}
pdf('./img/exhtest.pdf')
for (i in 1:N){
args = all_args[[i]]
print(i)
print(args)
l = gsoap_layout(pxgenes,
'Members',
'p.value',
distance = args$distance,
projection = args$projection,
weighted = args$weighted,
packing = args$packing,
clustering = args$clustering,
hc.method = args$hc.method,
cluster.stat = args$cluster.stat)
l$p.value = -log10(pxgenes$p.value)
print(head(l))
p = gsoap_plot(l,
as.color = args$color,
as.alpha = args$alpha,
show.size.guide = sample_bool(),
show.color.guide = sample_bool(),
show.alpha.guide = sample_bool(),
viridis.option = args$viridis,
which.labels = args$which.labels)
plot(p)
}
dev.off()
library(gsoap)
devtools::document()
devtools::test()
?cca_tranformation
library(philentropy)
?cca_tranformation
library(ProjectionBasedClustering)
?cca_tranformation
?CCA
library(gsoap)
devtools::document()
devtools::test()
?gsoap_plot
library(gsoap)
devtools::test()
devtools::document()
?data
# Load GSOAP package
library(gsoap)
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance),]
# Create GSOAP plot
gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
library(gsoap)
# Load GSOAP package
library(gsoap)
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance),]
# Create GSOAP plot
gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
colnames(layout)
library(gsoap)
devtools::document()
devtools::test()
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
colnames(layout)
# Order instances by their significance
layout = layout[order(layout$significance),]
# Create GSOAP plot
gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
# Order instances by their significance
layout = layout[order(-layout$significance),]
# Create GSOAP plot
gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
# Load GSOAP package
library(gsoap)
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
png(filename = './img/example_fig.png', width = 5, height = 3, res = 500)
plot(p)
dev.off()
plot(p)
, res = 500
png(filename = './img/example_fig.png', width = 5, height = 3, res = 500)
plot(p)
dev.off()
dev.off()
png(filename = './img/example_fig.png', width = 5, height = 3, res = 500)
#pdf()
plot(p)
dev.off()
pdf(filename = './img/example_fig.png', width = 5, height = 3)
plot(p)
dev.off()
pdf(filename = './img/example_fig.pdf', width = 5, height = 3)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 5, height = 3)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 10, height = 8)
plot(p)
dev.off()
pdf('./img/example_fig.pdf', width = 7, height = 5)
plot(p)
dev.off()
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.pdf', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
library(gsoap)
# Load example dataset
data(pxgenes)
# Create GSOAP layout
layout = gsoap_layout(pxgenes, 'Members', 'p.value')
# Order instances by their significance
layout = layout[order(layout$significance, decreasing = TRUE),]
# Create GSOAP plot
p = gsoap_plot(layout, as.color = 'cluster', as.alpha = 'significance', which.label = 1:5)
plot(p)
pdf('./img/gsoap_example.pdf', width = 7, height = 5)
plot(p)
dev.off()
png('./img/gsoap_example.png', width = 7, height = 5, units = 'in', res = 900)
plot(p)
dev.off()
setwd('~/workspace/Asmaa/')
# ---------------
# Load libraries
# ---------------
library(openxlsx)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(Hmisc)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig
pears.content.sig
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
colnames(pears.content.sig)
reshape(pears.tissues.sig[,c('Var1', 'Var2', 'corr')], idvar = 'Var1', timevar = 'Var2')
reshape(pears.tissues.sig[,c('Var1', 'Var2', 'corr')], idvar = 'Var1', timevar = 'Var2', direction = 'wide')
reshape(pears.tissues.sig, idvar = 'Var1', timevar = 'Var2', direction = 'wide', drop = c('pval', 'fdr'))
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.contnet.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.contnet.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pheatmap(pears.content.sig)
pheatmap(sign(pears.content.sig))
dim(pears.content.sig)
dim(pears.tissue.sig)
dim(pears.tissues.sig)
pears.tissues.sig
sign(pears.tissues.sig)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'),
new.row.names = pears.tissues.sig$Var1)
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'),
new.row.names = pears.content.sig$Var1)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
pears.tissues.sig = read.xlsx(fname, sheet = 2)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
pears.content.sig = read.xlsx(fname, sheet = 2)
pears.tissues.sig = reshape(pears.tissues.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
pears.content.sig = reshape(pears.content.sig,
idvar = 'Var1',
timevar = 'Var2',
direction = 'wide',
drop = c('pval', 'fdr'))
rownames(pears.tissues.sig) = pears.tissues.sig$Var1
rownames(pears.content.sig) = pears.content.sig$Var1
pears.tissues.sig = pears.tissues.sig[,-1]
pears.content.sig = pears.content.sig[,-1]
pheatmap(sign(pears.content.sig))
pears.content.sig[1:4, 1:4]
colnames(pears.content.sig)
setwd('~/workspace/Asmaa/')
# ---------------
# Load libraries
# ---------------
library(openxlsx)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(Hmisc)
# ---------------------------
# Load miRNA expression data
# ---------------------------
fname = './data/content/Asmaa_content_normalized_data.xlsx'
content.edata = read.xlsx(fname, sheet = 'normalized.data')
fname = './data/colon/Asmaa_normalized_data.xlsx'
tissues.edata = read.xlsx(fname, sheet = 'normalized.data')
# Keep only endogenous probes
content.edata = subset(content.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
tissues.edata = subset(tissues.edata, Code.Class %in% c('Endogenous1', 'Endogenous2'))
# Set probe names as rownames
rownames(content.edata) = content.edata$Name
rownames(tissues.edata) = tissues.edata$Name
# Drop probe data
content.edata = content.edata[,-c(1:3)]
tissues.edata = tissues.edata[,-c(1:3)]
# Get rid miRs with zero stand. dev.
content.edata = content.edata[apply(content.edata, 1, sd) != 0,]
tissues.edata = tissues.edata[apply(tissues.edata, 1, sd) != 0,]
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
# ---------------
# Load taxa data
# ---------------
fname = './data/content/otu_table_final_normalized_rel_L6_males_reorganized.xlsx'
taxa.data = read.xlsx(fname, startRow = 4, rowNames = T)
colnames(taxa.data) = rownames(mdata)
rownames(taxa.data) = paste0('C', 1:nrow(taxa.data))
# Plot heatmap of all taxa
pheatmap(t(taxa.data),
filename = './results/content_all_taxa.pdf',
width = 12.,
height = 12.5)
# -------------------------------------------------
# Calculate correlations between miRNA expression
# and taxa abundance (pearson and spearman)
# ------------------------------------------------
pears.content = rcorr(t(taxa.data),t(content.edata), type = 'pearson')
pears.tissues = rcorr(t(taxa.data),t(tissues.edata), type = 'pearson')
pears.content$r = pears.content$r[rownames(taxa.data),rownames(content.edata)]
pears.content$P = pears.content$P[rownames(taxa.data),rownames(content.edata)]
pears.tissues$r = pears.tissues$r[rownames(taxa.data),rownames(tissues.edata)]
pears.tissues$P = pears.tissues$P[rownames(taxa.data),rownames(tissues.edata)]
pheatmap(t(pears.content$r),
filename = './results/Pearson_content_all.pdf',
cellwidth = 7,
cellheight = 7)
pheatmap(t(pears.tissues$r),
filename = './results/Pearson_tissues_all.pdf',
cellwidth = 7,
cellheight = 7)
pears.content$r_melt = melt(pears.content$r, value.name = 'corr')
pears.content$P_melt = melt(pears.content$P, value.name = 'pval')
pears.tissues$r_melt = melt(pears.tissues$r, value.name = 'corr')
pears.tissues$P_melt = melt(pears.tissues$P, value.name = 'pval')
pears.content$res = cbind(pears.content$r_melt, pears.content$P_melt['pval'])
pears.tissues$res = cbind(pears.tissues$r_melt, pears.tissues$P_melt['pval'])
pears.content$res$fdr = p.adjust(pears.content$res$pval, 'fdr')
pears.tissues$res$fdr = p.adjust(pears.tissues$res$pval, 'fdr')
pears.content$sig.res = subset(pears.content$res, fdr < 0.01)
pears.tissues$sig.res = subset(pears.tissues$res, fdr < 0.01)
fname = './results/miRNAs_content_taxa_pearson_correlations.xlsx'
write.xlsx(pears.content[c('res', 'sig.res')], fname)
fname = './results/miRNAs_tissue_taxa_pearson_correlations.xlsx'
write.xlsx(pears.tissues[c('res', 'sig.res')], fname)
pdf('./results/miRNAs_content_taxa_dependencies.pdf')
for (i in 1:nrow(pears.content$sig.res)){
taxon = as.character(pears.content$sig.res$Var1[i])
mirna = as.character(pears.content$sig.res$Var2[i])
fdr = pears.content$sig.res$fdr[i]
r = pears.content$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(content.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
pdf('./results/miRNAs_tissue_taxa_dependencies.pdf')
for (i in 1:nrow(pears.tissues$sig.res)){
taxon = as.character(pears.tissues$sig.res$Var1[i])
mirna = as.character(pears.tissues$sig.res$Var2[i])
fdr = pears.tissues$sig.res$fdr[i]
r = pears.tissues$sig.res$corr[i]
title = paste0('R = ', round(r,2), '; FDR = ', round(fdr, 3))
x = as.numeric(taxa.data[taxon,])
y = as.numeric(tissues.edata[mirna,])
plot(x, y, main = title, xlab = taxon, ylab = mirna)
}
dev.off()
dim(pears.content$r)
pears.content$r[unique(pears.content$sig.res$Var1), unique(pears.content$sig.res$Var2)]
setwd('~/workspace/Asmaa/')
library(microbiomeSeq)
library(openxlsx)
library(phyloseq)
library(edgeR)
library(DESeq2)
library(ggplot2)
# -----------------------
# Load samples meta data
# -----------------------
fname = './src/Asmaa_sample_annotation.txt'
mdata = read.table(fname, sep = '\t', head = T)
# Sample IDs
sample.ids = paste0('X', mdata$SAMPLE.NO.)
# Set sample IDs as rownames
rownames(mdata) = sample.ids
# Keep only certain columns
mdata = mdata[,c('GROUP',	'DAM.NO.',	'PND')]
# PND to numeric
mdata$DAM.NO. = factor(mdata$DAM.NO.)
taxa.data
library(gsoap)
devtools::document()
devtools::test()
