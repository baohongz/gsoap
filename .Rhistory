library(gsoap)
?
gsoap
library(gsoap)
devtools::document()
library(gsoap)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(gsoap)
?create_gsoap_layout
library(gsoap)
?create_gsoap_layout
create_gsoap_layout = function(x,
genes,
pvalues,
splitter = ',',
distance.method = 'jaccard',
projection.method = 'iso',
scale.factor = 1.0,
weighted = TRUE,
do.packing = TRUE,
calc.centrality = TRUE,
do.clustering = TRUE,
isomap.k = 3,
tsne.perplexity = 30,
tsne.iterations = 1e+3,
cca.epochs = 10,
cca.alpha0 = 0.5,
no.clusters = NULL,
max.clusters = 8,
pam.boots = 100){ # add has genes
# -------------
# Check inputs
# -------------
if (missing(x)){
stop('Input is missing')
}
if (!is.data.frame(x)){
stop('Input is not data frame')
}
if (!is.character(rownames(x))){
stop('Input has missing or improper rownames')
}
if(!((genes %in% colnames(x))|(genes %in% 1:ncol(x)))){
stop('Wrong `genes` value')
}
if(!((pvalues %in% colnames(x))|(pvalues %in% 1:ncol(x)))){
stop('Wrong `pvalues` value')
}
if (!any(grepl(splitter, x[,genes]))){
warning('Either `genes`, or `splitter` seem to be not correct.')
}
# --------------
# Create layout
# --------------
# Extract query genes -- instances memberships
memberships.list = setNames(strsplit(x[,genes], splitter), rownames(x))
# Create association matrix
asc.mat = create_association_matrix(memberships.list)
# Get number of member genes
no.members = rowSums(asc.mat)
# Calculate distance matrix
dist.mat = calc_distance_matrix(asc.mat,
distance.method = distance.method)
# --------------------------
# Do projection to 2d space
# --------------------------
if (projection.method == 'iso'){
proj = suppressMessages(isomap_transformation(dist.mat,
isomap.k = isomap.k))
}
if (projection.method == 'mds'){
#res = mds_transformation(d)
proj = suppressMessages(sammons_tranformation(dist.mat))
}
if (projection.method == 'cca'){
proj = suppressMessages(cca_transformation(dist.mat,
cca.epochs,
cca.alpha0))
}
if (projection.method == 'tsne'){
proj = suppressMessages(tsne_transformation(dist.mat,
tsne.perplexity,
tsne.iterations))
}
# Do 2d projection
xy = proj$ProjectedPoints
# Calculate circle radius
layout = create_layout(xy, no.members, scale.factor = scale.factor)
# Circle packing
if (do.packing){
layout = setNames(packing_simple(layout), c('x', 'y', 'radius'))
}
# Set rownames
rownames(layout) = rownames(x)
# Calculate number of members
layout$size = no.members
# ---------------------
# Calculate distortion
# ---------------------
# Calculate euclidean distance between instances after projection
dx = as.matrix(suppressMessages(philentropy::distance(layout[,1:2], method = 'euclidean')))
# Calculate Kruskal stress after projection and packing
stress = ProjectionBasedClustering::KruskalStress(dist.mat, dx)
# Calculate spearman correlation
spcorr = cor(c(dist.mat), c(dx), method = 'spearman')
# -----------------------
# Extended functionality
# -----------------------
# Set weights
if (weighted){
layout$Weight = -log10(x[,pvalues])
} else {
layout$Weight = rep(1, nrow(layout))
}
# Calculate centrality and add to layout
if (calc.centrality){
layout$Centrality = apply(dist.mat, 1, weighted.mean, layout$Weight)
layout$Centrality = 1. - min_max_scale(layout$Centrality)
}
# Do clustering
if (do.clustering){
layout$Cluster = pamlustering(dist.mat,
layout$Weight,
no.clusters = no.clusters,
max.clusters = max.clusters,
boots = pam.boots)
}
# Wrap results together
res = list(layout,
distance.method,
projection.method,
scale.factor,
stress,
spcorr)
# Set names
names(res) = c('Layout',
'Distance method',
'Projection method',
'Scale factor',
'Stress',
'spcorr')
# Return
return(res)
}
?create_gsoap_layout
??create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
devtools::document()
devtools::document()
devtools::document()
?create_gsoap_layout
library(gsoap)
devtools::document()
?create_gsoap_layout
devtools::document()
?create_gsoap_layout
?create_gsoap_layout
devtools::document()
devtools::document()
?create_gsoap_layout
devtools::document()
library(gsoap)
devtools::document()
?plot_gsoap
devtools::document()
?plot_gsoap
devtools::document()
?plot_gsoap
?ggplot
devtools::document()
?ggplot
?aes
?geom_text_label
?geom_text_repel
